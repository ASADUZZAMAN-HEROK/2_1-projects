#include<bits/stdc++.h>
using namespace std;

struct minterms              //minterms and its binary representaion container
{
    int minn[100];           //Used minterms to make a implicant
    int siz;                 //Number of used minterms
    char rep[100];           //implicant binary represtaion
};


struct minterms ar[1000];    //implicant container 1
int st=0, t=1;

struct minterms ar2[1000];   //implicant container 2
int st2=0, t2=0;

struct minterms primimp[1000];  //Prime implicant container
int pr=0;

struct minterms result[1000];    //Result Container
int rt=0;


void bin(int x, char ar[], int y)      //decimal to Bin converter
{
    ar[y--]=0;
    int h=y;
    while(y>=0)
    {
        ar[y--]=(x%2)+48;
        x=x/2;
    }
    return;
}

int check[1000];                     //used minterms checking array


int primim(char che[], char mi[])    //implicant producer 1
{
    int i=0, c, ind;
    c=0;
    while(che[i]!=0)                  // Checking for single bit mis match
    {
        if(che[i]!=mi[i])
        {
            c++;                        // mis match count
            ind=i;                      //mis matched bit index
        }
        i++;
    }
    if(c==1)
    {
        if(che[ind]!='-'&&mi[ind]!='-')    //replacing mis matched index with '_'
        {
            strcpy(ar2[st2].rep, che);     //Copying implecant in 2nd container for next column
            ar2[st2].rep[ind]='-';
            return 1;
        }
        else
            return 0;
    }
    else
        return 0;
}

int primim2(char che[], char mi[])          //implicant producer 1
{
    int i=0, c, ind;
    c=0;
    while(che[i]!=0)                        // mis match count
    {
        if(che[i]!=mi[i])                   //mis matched bit index
        {
            c++;
            ind=i;                          //mis matched bit index
        }
        i++;
    }
    if(c==1)
    {
        if(che[ind]!='-'&&mi[ind]!='-')
        {
            strcpy(ar[st].rep, che);        //Copying implecant in 1'st container for next column
            ar[st].rep[ind]='-';
            return 1;
        }
        else
            return 0;
    }
    else
        return 0;
}


int main()
{

    printf("Enter Number of Variables: ");          // Input for number of variable
    int n;
    scanf("%d", &n);
    printf("Enter Number of Minterms: ");           //Input for number of minterms
    int nmmin;
    scanf("%d", &nmmin);
    printf("Enter minterms: ");                     //Minterms Input


    int  minn[nmmin];                               //minterms array

    int i,j,k,l, flag=0, prm=0;

    for(i=0; i<nmmin; i++)                          //minterms scaning loop
    {
        scanf("%d", &minn[i]);
        memset(ar[st].minn, -1, sizeof(ar[st].minn));    //Clearing implicant container
        bin(minn[i], ar[st].rep, n);                       //bin conversion

        ar[st].minn[0]=minn[i];                             //decimal minterm assigning
        ar[st].siz=1;                                       //used minterms number assigning
        st++;

        printf("(");
        for(j=0; j<1; j++)                                  //printing minterms with binary representation
            printf("%d ", ar[i].minn[j]);
        printf(")= %s\n", ar[i].rep);

    }

    printf("\n");

    k=0;
    while(1)                                            //Prime implicant producer loop
    {
        st2=0;
        flag=0;
        memset(check, -1, sizeof(check));                 //Clearing used minterm checked array
        for(i=0; i<st-1; i++)
        {
            for(j=i+1; j<st; j++)                           //checking for next column implicants
            {
                l=0;
                if(primim(ar[i].rep, ar[j].rep)==1)         // if single mis match of bit found then true
                {
                    check[i]=1;                             //used minterms marked
                    check[j]=1;
                    for(k=0; k<t; k++)
                    {
                        ar2[st2].minn[l++]=ar[i].minn[k];    //copying used minterms to 2nd implicant container
                    }
                    for(k=0; k<t; k++)
                    {
                        ar2[st2].minn[l++]=ar[j].minn[k];     //copying used minterms to 2nd implecant container
                    }
                    ar2[st2].siz=l;                             //assigning used minterm number
                    st2++;
                    flag=1;
                    prm=1;

                }
            }
        }

        t=t*2;

        for(i=0; i<st; i++)                                   //Checking for unused mineterms, those will be prim implicant
        {
            if(check[i]==-1)
                primimp[pr++]=ar[i];                           //copying prime implicant to prime implicant container
        }

        for(i=0; i<st2; i++)                                //Next  column printing loop
        {
            printf("(");
            for(j=0; j<ar2[i].siz; j++)
                printf("%d ", ar2[i].minn[j]);
            printf(")= %s\n", ar2[i].rep);
        }

        memset(check, -1, sizeof(check));                     //Clearing minterms checking array
        st=0;
        for(i=0; i<st2-1; i++)
        {
            for(j=i+1; j<st2; j++)
            {
                if(primim2(ar2[i].rep, ar2[j].rep)==1)       //Checking for Next column Implicant
                {
                    check[i]=1;                              //used minterms marked
                    check[j]=1;
                    l=0;
                    for(k=0; k<t; k++)
                    {
                        ar[st].minn[l++]=ar2[i].minn[k];     //copying used minterms to first container
                    }
                    for(k=0; k<t; k++)
                    {
                        ar[st].minn[l++]=ar2[j].minn[k];     //copying used minterms to first container
                    }
                    ar[st].siz=l;                               //assigning used minterm number
                    flag=1;
                    st++;
                }
            }
        }

        t=2*t;

        for(i=0; i<st2; i++)                                 //Checking for unused minterms, those will be prim implicant
        {
            if(check[i]==-1)
                primimp[pr++]=ar2[i];                           //copying prime implicant to prime implicant container
        }

        printf("\n");

        for(i=0; i<st; i++)                                 //Next column printing loop
        {
            printf("(");
            for(j=0; j<ar[i].siz; j++)
                printf("%d ", ar[i].minn[j]);
            printf(")= %s\n", ar[i].rep);
        }
        printf("\n");

        if(flag==0)                                     //when no more Implicant production is possible, breaking the loop
            break;

    }

    printf("Prime Implicant :\n");                      //Prime Implicant printing
    for(i=0; i<pr; i++)
    {
        printf("(");
        for(j=0; j<primimp[i].siz; j++)
            printf("%d ", primimp[i].minn[j]);
        printf(")= %s\n", primimp[i].rep);

    }

    printf("\nResult:\n");

    map<int, int> mp;
    for(i=0; i<primimp[pr-1].siz; i++)        //taking Most minterms covering Implicant as a solution
        mp[primimp[pr-1].minn[i]]=1;          //maping used minterms with 1

    int used=primimp[pr-1].siz;               //taking Most minterms covering Implicant as a solution
    int x, ind, c;

    for(i=0; i<n; i++)                          //Creating the first product result
    {
        if(primimp[pr-1].rep[i]=='-')
            continue;
        else if(primimp[pr-1].rep[i]=='0')
            printf("%c'",i+65);
        else
            printf("%c",i+65);
    }

    if(used>=nmmin)                     //checking all the minterms are coverd or not
    {
        printf("\n\n\n");
        system("pause");
        return 0;
    }

    while(1)                           //Other essential Prime Implicant finding
    {
        x=0;
        ind=0;
        for(i=pr-2; i>=0; i--)         //finding the next  most minterms covering Implicant
        {
            c=0;
            for(j=0; j<primimp[i].siz; j++)
            {
                if(mp[primimp[i].minn[j]]==1)
                    continue;
                c++;
            }
            if(x<c)
            {
                x=c;
                ind=i;
            }
        }
        printf("+");
        for(i=0; i<n; i++)                   //Creating Next product result
        {
            if(primimp[ind].rep[i]=='-')
                continue;
            else if(primimp[ind].rep[i]=='0')
                printf("%c'",i+65);
            else
                printf("%c",i+65);
        }
        for(j=0; j<primimp[ind].siz; j++)    //marking used minterms
        {
            mp[primimp[ind].minn[j]]=1;
        }
        used+=x;                            //determining number of used minterms

        if(used==nmmin)                    //If all the minterms are covered then result is found
            break;
    }

    printf("\n\n\n");

    system("pause");

    return 100;

}
